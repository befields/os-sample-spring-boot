def MVN_REPO            = "/tmp/workspace/maven/repository/"
def MVN_CMD             = "mvn -Dmaven.repo.local=${MVN_REPO}"
def MVN_INSTALL         = "clean install -DskipTests=true"
def MVN_TEST            = "test"
def BASE_OS_IMAGE       = "tomcat:8.5.54-jdk8-corretto"
def APP_NAME            = "backend"
def GIT_PROJECT         = "ocp-sample-backend"
def OC_BUILD_TEMPLATE   = "${GIT_PROJECT}/build-template.yml"
def OC_DEPLOY_TEMPLATE  = "${GIT_PROJECT}/deployment-template.yml"
def PORT                = "8080"
def OC_DEPLOY_PROJECT   = "cicd"
def IMAGE_REGISTRY      = "image-registry.openshift-image-registry.svc:5000"
def GIT_REPO            = "https://github.com/anixon-rh/os-sample-spring-boot.git"

pipeline {

    agent {
        label "maven"
    }

    stages {
        stage ("Checkout repos"){
            steps {
                sh 'echo Checking out the git repo for build artifacts'
                checkout([$class: "GitSCM",
                    branches: [[name: "*/master"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: "RelativeTargetDirectory",
                    relativeTargetDir: "./"]],
                    submoduleCfg: [],
                    userRemoteConfigs:
                    [[credentialsId: "", url: "${GIT_REPO}"]]]
                )
            }
        }
        stage ("Compile code"){
            steps{
                dir ("${GIT_PROJECT}") {
                    sh "echo Compiling code"
                    sh "${MVN_CMD}   ${MVN_INSTALL}"
                }
            }
        }
        stage ("Perform Tests"){
            steps{
                dir ("${GIT_PROJECT}") {
                    sh "echo Performing maven tests"
                    sh "${MVN_CMD}   ${MVN_TEST}"
                }
            }
        }
        stage ("Delete existing objects"){
          steps{
            sh "oc delete all --selector app=${APP_NAME}"
          }
        }
        stage ("Create Image"){
            steps {
                sh "echo Creating objects"
                sh "oc process -f ${OC_BUILD_TEMPLATE} -p NAME=${APP_NAME} -p FROM_IMAGE=${BASE_OS_IMAGE} -p IMAGE_KIND=DockerImage | oc apply -f -"

                sh "echo Building Image"
                sh "oc start-build ${APP_NAME} --from-dir ${GIT_PROJECT}/ --follow"
            }
        }
        stage ("Deploy Image"){
            steps {
                sh "echo Configuring Application"
                sh "oc process -f ${GIT_PROJECT}/deployment-template.yml -p NAME=${APP_NAME} -p PORT=${PORT} -p OC_BUILD_PROJECT_NAME=${OC_DEPLOY_PROJECT} -p IMAGE_REGISTRY=${IMAGE_REGISTRY} | oc apply -f -"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/applicantdb"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_DATASOURCE_USERNAME=sampleuser"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_DATASOURCE_PASSWORD=password123"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_JPA_HIBERNATE_DDL-AUTO=update"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_JPA_GENERATE-DLL=true"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_DATASOURCE_DRIVERCLASSNAME=com.mysql.cj.jdbc.Driver"
                sh "oc set env dc ${APP_NAME} --overwrite SPRING_JPA_DATABASE-PLATFORM=org.hibernate.dialect.MySQL57Dialect"

                sh "echo Application configured, spinning up an instance of it"
                sh "oc scale dc ${APP_NAME} --replicas=1"
            }
        }
    }
}
